# env-sync.yml
name: Sync environments with active branches

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0,6,12,18 * * *' # Runs at 00:00, 06:00, 12:00, and 18:00 UTC

jobs:
  sync-environments:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS CLI
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION

      - name: Retrieve active branches
        id: branches
        run: |
          BRANCHES=$(git ls-remote --heads origin | awk '{print $2}' | sed 's/refs\/heads\///')
          echo "Active branches: $BRANCHES"
          echo "::set-output name=branches::$BRANCHES"

      - name: Retrieve existing environments
        id: environments
        run: |
          ENVIRONMENTS=$(aws elasticbeanstalk describe-environments --region ${{ secrets.AWS_REGION }} --application-name hub-api --query "Environments[?Status != 'Terminated'].EnvironmentName" --output text)
          echo "Existing environments: $ENVIRONMENTS"
          echo "::set-output name=environments::$ENVIRONMENTS"

      - name: Sync environments with branches
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ROUTE_53_HOSTED_ZONE_ID: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
        run: |
          set -e

          pip install awsebcli

          BRANCHES="${{ steps.branches.outputs.branches }}"
          ENVIRONMENTS="${{ steps.environments.outputs.environments }}"

          for BRANCH in $BRANCHES; do
            BRANCH_NAME=${BRANCH//\//-} # Replace slashes with hyphens
            EB_ENV_NAME=hub-api-${BRANCH_NAME}

            if echo "$ENVIRONMENTS" | grep -q "$EB_ENV_NAME"; then
              echo "Environment $EB_ENV_NAME exists for branch $BRANCH. Updating..."
              eb deploy $EB_ENV_NAME --staged
            else
              echo "Environment $EB_ENV_NAME does not exist for branch $BRANCH. Creating..."
              eb init -p "Docker running on 64bit Amazon Linux 2023" hub-api --region $AWS_REGION
              eb create $EB_ENV_NAME --envvars AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY,DB_USER=$DB_USER,DB_HOST=$DB_HOST,DB_NAME=$DB_NAME,DB_PASSWORD=$DB_PASSWORD,DB_PORT=$DB_PORT,PORT=$PORT,HOST=$HOST --single
              eb deploy $EB_ENV_NAME

              # Get the CNAME of the new environment
              CNAME=$(eb status $EB_ENV_NAME --verbose | grep "CNAME:" | awk '{print $2}')

              # Update Route 53 record
              BRANCH_DOMAIN=${BRANCH_NAME}.verbohub.com.br
              cat > change-batch.json <<EOF
              {
                "Comment": "Update CNAME to point to new environment",
                "Changes": [
                  {
                    "Action": "UPSERT",
                    "ResourceRecordSet": {
                      "Name": "${BRANCH_DOMAIN}",
                      "Type": "CNAME",
                      "TTL": 300,
                      "ResourceRecords": [
                        {
                          "Value": "${CNAME}"
                        }
                      ]
                    }
                  }
                ]
              }
            EOF

              aws route53 change-resource-record-sets --hosted-zone-id $ROUTE_53_HOSTED_ZONE_ID --change-batch file://change-batch.json
              echo "Created environment and CNAME for $BRANCH_DOMAIN."
            fi
          done

          for ENV in $ENVIRONMENTS; do
            BRANCH_NAME=$(echo $ENV | sed 's/hub-api-//')
            if ! echo "$BRANCHES" | grep -q "$BRANCH_NAME"; then
              echo "Environment $ENV does not have a corresponding branch. Deleting..."
              eb terminate $ENV --force

              # Wait for termination to complete
              while aws elasticbeanstalk describe-environments --region $AWS_REGION --application-name hub-api --environment-names $ENV --query "Environments[?Status != 'Terminated'].EnvironmentName" --output text | grep -q $ENV; do
                echo "Waiting for environment $ENV to terminate..."
                sleep 30
              done

              echo "Environment $ENV terminated successfully."

              # Delete Route 53 record
              BRANCH_DOMAIN=${BRANCH_NAME}.verbohub.com.br
              cat > change-batch.json <<EOF
              {
                "Comment": "Delete CNAME for terminated environment",
                "Changes": [
                  {
                    "Action": "DELETE",
                    "ResourceRecordSet": {
                      "Name": "${BRANCH_DOMAIN}",
                      "Type": "CNAME",
                      "TTL": 300,
                      "ResourceRecords": [
                        {
                          "Value": "${ENV}.elasticbeanstalk.com"
                        }
                      ]
                    }
                  }
                ]
              }
            EOF

              aws route53 change-resource-record-sets --hosted-zone-id $ROUTE_53_HOSTED_ZONE_ID --change-batch file://change-batch.json
              echo "Deleted CNAME record for $BRANCH_DOMAIN."
            fi
          done
