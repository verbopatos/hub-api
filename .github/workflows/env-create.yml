name: Deploy test environment to Elastic Beanstalk

on:
  push:
    branches-ignore:
      - main

jobs:
  deploy-non-prod-env:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install dependencies and generate Prisma Client
        run: |
          npm install
          npx prisma generate

      - name: Configure AWS CLI
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION

      - name: Verify AWS CLI Configuration
        run: |
          aws sts get-caller-identity
          aws ecr describe-repositories --region ${{ secrets.AWS_REGION }}

      - name: Get ECR login password
        id: ecr-login
        run: echo "ECR_PASSWORD=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        env:
          ECR_PASSWORD: ${{ env.ECR_PASSWORD }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          DOMAIN=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          echo "$ECR_PASSWORD" | docker login --username AWS --password-stdin $DOMAIN

      - name: Build, tag, and push Docker image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          REPOSITORY_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/hub-api
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME=${BRANCH_NAME//\//-} # Replace slashes with hyphens
          IMAGE_TAG=${BRANCH_NAME}-latest
          docker build -t $REPOSITORY_URI:$IMAGE_TAG .
          docker push $REPOSITORY_URI:$IMAGE_TAG

      - name: Construct DATABASE_URL
        id: construct-db-url
        run: |
          echo "DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" >> $GITHUB_ENV

      - name: Construct HOST
        id: construct-host
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME=${BRANCH_NAME//\//-} # Replace slashes with hyphens
          echo "HOST=${BRANCH_NAME}.api.verbohub.com.br" >> $GITHUB_ENV

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          HOST: ${{ env.HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
          PORT: ${{ secrets.PORT }}
          ROUTE_53_HOSTED_ZONE_ID: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          set -e

          pip install awsebcli

          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME=${BRANCH_NAME//\//-} # Replace slashes with hyphens
          EB_ENV_NAME=hub-api-${BRANCH_NAME}
          EB_APP_NAME=hub-api

          eb init -p "Docker running on 64bit Amazon Linux 2023" $EB_APP_NAME --region $AWS_REGION

          # Check if the environment exists using AWS CLI
          ENV_EXISTS=$(aws elasticbeanstalk describe-environments --region $AWS_REGION --application-name $EB_APP_NAME --environment-names $EB_ENV_NAME --query "Environments[?Status != 'Terminated'].EnvironmentName" --output text)

          if [ "$ENV_EXISTS" == "$EB_ENV_NAME" ]; then
            echo "Environment $EB_ENV_NAME exists. Updating..."
            eb setenv AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY DB_USER=$DB_USER DB_HOST=$DB_HOST DB_NAME=$DB_NAME DB_PASSWORD=$DB_PASSWORD DB_PORT=$DB_PORT PORT=$PORT HOST=$HOST DATABASE_URL=$DATABASE_URL
            eb deploy $EB_ENV_NAME --staged
          else
            echo "Environment $EB_ENV_NAME does not exist. Creating..."
            eb create $EB_ENV_NAME --envvars AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY,DB_USER=$DB_USER,DB_HOST=$DB_HOST,DB_NAME=$DB_NAME,DB_PASSWORD=$DB_PASSWORD,DB_PORT=$DB_PORT,PORT=$PORT,HOST=$HOST,DATABASE_URL=$DATABASE_URL --single
            eb deploy $EB_ENV_NAME

            # Get the CNAME of the new environment
            CNAME=$(eb status $EB_ENV_NAME --verbose | grep "CNAME:" | awk '{print $2}')

            # Update Route 53 record
            BRANCH_DOMAIN=${BRANCH_NAME}.api.verbohub.com.br
            cat > change-batch.json <<EOF
            {
              "Comment": "Update CNAME to point to new environment",
              "Changes": [
                {
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                    "Name": "${BRANCH_DOMAIN}",
                    "Type": "CNAME",
                    "TTL": 300,
                    "ResourceRecords": [
                      {
                        "Value": "${CNAME}"
                      }
                    ]
                  }
                }
              ]
            }
          EOF

            aws route53 change-resource-record-sets --hosted-zone-id $ROUTE_53_HOSTED_ZONE_ID --change-batch file://change-batch.json
          fi

          # Print logs for debugging
          echo "Printing environment logs for debugging..."
          eb logs $EB_ENV_NAME > "$(date +%Y-%m-%d_%H-%M-%S)_eb-logs_${EB_APP_NAME}_${BRANCH_NAME}.log"
